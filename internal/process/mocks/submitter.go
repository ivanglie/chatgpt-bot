// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// Submitter is a mock implementation of events.submitter.
//
//	func TestSomethingThatUsessubmitter(t *testing.T) {
//
//		// make and configure a mocked events.submitter
//		mockedsubmitter := &Submitter{
//			SubmitFunc: func(ctx context.Context, text string, pin bool) error {
//				panic("mock out the Submit method")
//			},
//		}
//
//		// use mockedsubmitter in code that requires events.submitter
//		// and then make assertions.
//
//	}
type Submitter struct {
	// SubmitFunc mocks the Submit method.
	SubmitFunc func(ctx context.Context, text string, pin bool) error

	// calls tracks calls to the methods.
	calls struct {
		// Submit holds details about calls to the Submit method.
		Submit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Text is the text argument value.
			Text string
			// Pin is the pin argument value.
			Pin bool
		}
	}
	lockSubmit sync.RWMutex
}

// Submit calls SubmitFunc.
func (mock *Submitter) Submit(ctx context.Context, text string, pin bool) error {
	if mock.SubmitFunc == nil {
		panic("Submitter.SubmitFunc: method is nil but submitter.Submit was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Text string
		Pin  bool
	}{
		Ctx:  ctx,
		Text: text,
		Pin:  pin,
	}
	mock.lockSubmit.Lock()
	mock.calls.Submit = append(mock.calls.Submit, callInfo)
	mock.lockSubmit.Unlock()
	return mock.SubmitFunc(ctx, text, pin)
}

// SubmitCalls gets all the calls that were made to Submit.
// Check the length with:
//
//	len(mockedsubmitter.SubmitCalls())
func (mock *Submitter) SubmitCalls() []struct {
	Ctx  context.Context
	Text string
	Pin  bool
} {
	var calls []struct {
		Ctx  context.Context
		Text string
		Pin  bool
	}
	mock.lockSubmit.RLock()
	calls = mock.calls.Submit
	mock.lockSubmit.RUnlock()
	return calls
}
